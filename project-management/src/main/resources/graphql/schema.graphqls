scalar LocalDate
scalar LocalDateTime

type ProjectDTO {
    projectId: ID!
    projectName: String!
    projectDescription: String!
    priority: ProjectPriorityLevel
    assignerId: Int
    tags: [String]
    dueDate: LocalDate
    collaboratorIds: [Int]
    teamIds: [Int]
    memberIcons: [String]
    status: ProjectStatus
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}

type Query {
    getAllProjects: [ProjectDTO]
    getProject(id: Int!): ProjectDTO
    getProjectsByTeamId(teamId: Int!): [ProjectDTO]
}

type Mutation {
    createProject(input: ProjectInput!): String
    updateProject(input: ProjectInput!): String
    deleteProject(id: Int!): String
    updateCollaborators(projectId: Int!, input: CollaboratorsAndTeamsInput!): String
    updateProjectStatus(projectId: Int!, input: ProjectStatusInput!): String
}

input ProjectInput {
    projectId: ID
    projectName: String!
    projectDescription: String!
    priority: ProjectPriorityLevel
    assignerId: Int
    tags: [String]
    dueDate: LocalDate
    collaboratorIds: [Int]
    teamIds: [Int]
    memberIcons: [String]
    status: ProjectStatus
}

input CollaboratorsAndTeamsInput {
    collaboratorIds: [Int]!
    teamIds: [Int]!
}

input ProjectStatusInput {
    status: ProjectStatus!
}

enum ProjectPriorityLevel {
    LOW
    MEDIUM
    HIGH
}

enum ProjectStatus {
    PENDING
    ON_GOING
    COMPLETED
}
